name: MLOps Pipeline - Train & Test

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    # Allow manual trigger

jobs:
  # Job 1: Data Validation
  validate-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pandas

      - name: Validate datasets
        run: |
          python -c "
          import pandas as pd
          train_df = pd.read_csv('Data-set/train_dataset.csv')
          test_df = pd.read_csv('Data-set/test_dataset.csv')

          print(f'✅ Training set shape: {train_df.shape}')
          print(f'✅ Test set shape: {test_df.shape}')

          assert train_df.shape[0] > 0, 'Training set is empty'
          assert test_df.shape[0] > 0, 'Test set is empty'
          assert train_df.shape[1] > 0, 'Training set has no features'
          print('✅ Data validation passed!')
          "

  # Job 2: Run DVC Pipeline
  train-model:
    runs-on: ubuntu-latest
    needs: validate-data
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install dvc

      - name: Run DVC pipeline
        run: |
          dvc repro

      - name: Generate metrics
        run: |
          python src/evaluate.py
          cat metrics.json

      - name: Upload metrics
        uses: actions/upload-artifact@v4
        with:
          name: metrics
          path: metrics.json

  # Job 3: Run Tests
  test:
    runs-on: ubuntu-latest
    needs: train-model
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run unit tests
        run: |
          pytest -v --cov=src --tb=short

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 4: API Testing
  api-test:
    runs-on: ubuntu-latest
    needs: train-model
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Start application
        run: |
          nohup python -m uvicorn main:app --host 0.0.0.0 --port 8000 > app.log 2>&1 &
          sleep 5

      - name: Test health endpoint
        run: |
          curl -f http://localhost:8000/health || exit 1
          echo "✅ Health check passed"

      - name: Test prediction endpoint
        run: |
          python -c "
          import requests
          import json

          # Test data
          data = {
              'pH': 7.5,
              'Hardness': 150,
              'Solids': 10000,
              'Chloramines': 5.5,
              'Sulfate': 200,
              'Conductivity': 500,
              'Organic_carbon': 10,
              'Trihalomethanes': 100,
              'Turbidity': 3.5
          }

          response = requests.post('http://localhost:8000/predict', json=data)
          assert response.status_code == 200, f'Prediction failed: {response.text}'
          result = response.json()
          print(f'✅ Prediction response: {json.dumps(result, indent=2)}')
          "

  # Job 5: Build Docker image
  build-docker:
    runs-on: ubuntu-latest
    needs: [test, api-test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ env.REGISTRY }}/tejasthange3/mlops-water-potability:${{ github.sha }}
            ${{ env.REGISTRY }}/tejasthange3/mlops-water-potability:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Notify Results
  notify:
    runs-on: ubuntu-latest
    needs: [validate-data, train-model, test, api-test, build-docker]
    if: always()
    steps:
      - name: Prepare summary
        run: |
          echo "## MLOps Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Data Validation: ${{ needs.validate-data.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Model Training: ${{ needs.train-model.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ API Tests: ${{ needs.api-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker Build: ${{ needs.build-docker.result }}" >> $GITHUB_STEP_SUMMARY

env:
  REGISTRY: ghcr.io
