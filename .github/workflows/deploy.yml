name: Build and Deploy to EC2

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mlops-water-potability

jobs:
  # Job 1: Build and test
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        run: |
          pytest -v --tb=short || true

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/tejasthange3/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/tejasthange3/${{ env.IMAGE_NAME }}:latest .

      - name: Log in to Container Registry
        if: github.event_name == 'push'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u $ --password-stdin

      - name: Push Docker image
        if: github.event_name == 'push'
        run: |
          docker push ${{ env.REGISTRY }}/tejasthange3/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/tejasthange3/${{ env.IMAGE_NAME }}:latest

  # Job 2: Deploy to EC2
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd ~/Mlops-Project

            # Pull latest code
            git pull origin main

            # Pull latest Docker image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Stop running containers
            docker-compose down || true

            # Start new containers
            docker-compose up -d

            # Check if application is healthy
            sleep 10
            curl -f http://localhost:8000/health || exit 1

            echo "‚úÖ Deployment successful!"

      - name: Verify Deployment
        run: |
          echo "üéâ Application deployed successfully!"
          echo "Access at: http://${{ secrets.EC2_HOST }}:8000"

      - name: Slack Notification (Success)
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "‚úÖ Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*GitHub Actions - Deployment Successful* ‚úÖ\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Triggered by:* ${{ github.actor }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Application running at:*\nhttp://${{ secrets.EC2_HOST }}:8000"
                  }
                }
              ]
            }

      - name: Slack Notification (Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "‚ùå Deployment Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*GitHub Actions - Deployment Failed* ‚ùå\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}"
                  }
                }
              ]
            }
